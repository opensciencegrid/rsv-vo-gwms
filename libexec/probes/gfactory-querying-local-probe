#!/usr/bin/python

import os
import re
import subprocess
import sys
import urllib2
import rsvprobe
import htcondor
import classad
import re
import ConfigParser

sys.path.insert(0, '.')


class GfactoryQueryingLocalProbe(rsvprobe.RSVProbe):
    """
    This master probe querys condor collector at a gfactory and parses it to obtain the urls
    of several CE nodes that accept jobs from the wanted VO
    """

    def __init__(self):
        rsvprobe.RSVProbe.__init__(self)
        self.metric = ""
        self.short_metric = ""
        metric = rsvprobe.RSVMetric("Gfactory-querying",
                 "org.osg.local-gfactory-querying-local", rsvprobe.RSVMetric.STATUS)
        self.supported_metrics = [metric]
        self.details = "---\n"
        self.gfactory = "glidein-itb.grid.iu.edu"
        self.constraint = """(GLIDEIN_GridType=?="condor" || GLIDEIN_GridType=?="gt5" || GLIDEIN_GridType=?="gt2" || GLIDEIN_GridType=?="cream" || GLIDEIN_GridType=?="nordugrid") && stringListMember("IceCube",GLIDEIN_Supported_VOs)"""
        self.dummyMetric = "org.osg.general.dummy-probe"
        self.addopt("", "gfactory=", "--gfactory the host name of the gfactory i.e glidein-itb.grid.iu.edu")
        self.addopt("", "dmetric=", "--dmetric the metric to be executed at the hosts from the gfactory i,e org.osg.general.osg-version")
        self.addopt("", "constraint=", """--constraint the constraint to query the gfactory collector i.e stringListMember("CMS",GLIDEIN_Supported_VOs)""")

    def parseopt(self):
        """parse options specific to the gfactory probe
        """
        options, optlist, remainder = rsvprobe.RSVProbe.parseopt(self)
        for opt, arg in options:
            # Adding the extra meshes
            if 'gfactory' in opt:
                self.gfactory = arg
            elif 'dmetric' in opt:
                self.dummyMetric = arg
            elif 'constraint' in opt:
                self.constraint = arg
            if self.host == self.localhost:
                self.is_local = True
            else:
                self.is_local = False
        return options, optlist, remainder

    # Enables a dummy probe for each node in nodes
    def enableDummyProbe(self, nodes, metric):
        for node in nodes:
            cmd = "rsv-control --enable --host %s %s" % (node, metric)
            ec, out = rsvprobe.run_command(cmd)
            # make a warning if the dummy metric failed
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to enable probe failed for node: %s" % (node), exit_code=0)
            cmd = "rsv-control --on --host %s %s" % (node, metric)
            ec, out = rsvprobe.run_command(cmd)
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to turn on probe failed for node: %s, metric %s" % (node, metric), exit_code=0)
    
    # Disable the dummy probe for a list of nodes
    def disableDummyProbe(self, nodes, metric):
        for node in nodes:
            cmd = "rsv-control --disable --host %s %s" % (node, metric)
            ec, out = rsvprobe.run_command(cmd)
            # make a warning if the dummy metric failed                                                                                                       
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to enable probe failed for node: %s" % (node), exit_code=0)
            cmd = "rsv-control --off --host %s %s" % (node, metric)
            ec, out = rsvprobe.run_command(cmd)
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to turn off probe failed for node: %s" % (node), exit_code=0)
        

    #Returns a list of nodes that are currently enabled for a given metric
    def getListEnablednodes(self, metric):
        cmd = "rsv-control --list --wide %s | grep host | awk '{print $5}'" % (metric)
        ec, out = rsvprobe.run_command(cmd)
        result = out.split("\n")
        if 'not' in result:
            result.remove('not')
        return result

    def getListNodesToDisable(self, actualNodes, enabledNodes):
        nodesToDisable = []
        for node in enabledNodes:
            if node not in actualNodes and len(node)>0:
                nodesToDisable.append(node)
        return nodesToDisable
    
    def getListNodesToEnable(self, actualNodes, enabledNodes):
        nodesToEnable = []
        for node in actualNodes:
                if node not in enabledNodes:
                    nodesToEnable.append(node)
        return nodesToEnable

    def getListNodesFactory(self, newconstraint):
        # A dictionary with all the gatekeepers
        gateKeepers = {}
        actualNodes = []
        # querying the gfactory
        coll = htcondor.Collector(self.gfactory)
        constraint = 'MyType=?="glidefactory" && ' + newconstraint
        self.add_message("constraint for factory querying: %s" % constraint)
        self.add_message("Gfactory queried: %s" % self.gfactory)
        results = coll.query(htcondor.AdTypes.Any, constraint, ['GLIDEIN_Site', 'GLIDEIN_ResourceName', 'GLIDEIN_Gatekeeper', 'GLIDEIN_GridType'])
        # Parsing the results into a dictionary with the CE's info
        condorceprog = re.compile("(.*) (.*)")
        creamceprog = re.compile("(.*):([0-9]*)/(.*)")
        for result in results:
            # Create new gatekeeper entry
            gatekeeper = {}
            gatekeeper["grid_type"] = result["GLIDEIN_GridType"]
            gatekeeper["grid_resource"] = result["GLIDEIN_Gatekeeper"]
            if result["GLIDEIN_GridType"] in ['gt2', 'gt5']:
                gatekeeper["grid_type"] = 'gram'
            elif 'condor' in result["GLIDEIN_GridType"]:
                gatekeeper["grid_type"] = 'htcondor-ce'
                m = condorceprog.match(gatekeeper["grid_resource"])
                gatekeeper["host"] = m.group(1)
                gatekeeper["htcondor-ce-collector"] = m.group(2)
            elif 'cream' in result["GLIDEIN_GridType"]:
                gatekeeper["grid_type"] = 'cream'
            elif 'nordugrid' in result["GLIDEIN_GridType"]:
                gatekeeper["grid_type"] = 'nordugrid'
                gatekeeper["host"] = result["GLIDEIN_Gatekeeper"]
            #nordugrid resource name has no jobmanager or port
            if gatekeeper['grid_type'] in ['cream', 'gram']:
                m = creamceprog.match(gatekeeper["grid_resource"])
                gatekeeper["host"] = m.group(1)
                gatekeeper["port"] = m.group(2)
                gatekeeper["jobmanager"] = m.group(3)
            # Check if a previous existed so it use the most up to date
            if not gatekeeper["host"] in gateKeepers:
                gateKeepers[gatekeeper["host"]]=gatekeeper
        return gateKeepers

    def updateProbeConfigurations(self, metric):
        for host in self.gateKeepers:
            dirpath = '/etc/rsv/metrics/' + host
            configFile = dirpath + '/' + metric + '.conf'
            self.add_message("Updating configuration for host %s" % (host))
            # Check that the conf directort for each host exists
            if not os.path.isdir(dirpath):
                os.mkdir(dirpath)
            cfgfile = open(configFile, 'w')
            Config = ConfigParser.ConfigParser()
            Config.add_section(metric)
            Config.set(metric, 'ce-type', self.gateKeepers[host]['grid_type'])
            if self.gateKeepers[host]['grid_type'] in ['cream', 'gt5', 'gt2']:
                 Config.set(metric, 'jobmanager', self.gateKeepers[host]['jobmanager'])
            if self.gateKeepers[host]['grid_type'] in ['htcondor-ce']:
                Config.set(metric, 'htcondor-ce-collector', self.gateKeepers[host]['htcondor-ce-collector'])
            Config.write(cfgfile)
            cfgfile.close()
            
    def run(self):
        """Main routine for the probe"""
        self.parseopt()
        actualNodes = []
        self.gateKeepers = self.getListNodesFactory(self.constraint)
        actualNodes = self.gateKeepers.keys()
        #Enabled nodes is the list of currently enabled nodes
        self.add_message("Getting list of enabled nodes")
        enabledNodes = self.getListEnablednodes(self.dummyMetric)
        self.add_message("Calculating list of enabled and disabled nodes")
        nodesToEnable = self.getListNodesToEnable(actualNodes, enabledNodes)
        nodesToDisable = self.getListNodesToDisable(actualNodes, enabledNodes)
        self .add_message("Enabling nodes %s " % nodesToEnable)
        self.enableDummyProbe(nodesToEnable, self.dummyMetric)
        self.add_message("Disabling nodes %s " % nodesToDisable)
        self.disableDummyProbe(nodesToDisable, self.dummyMetric)
        self.updateProbeConfigurations(self.dummyMetric)
        self.return_ok("Everything OK")

def main():
    probe = GfactoryQueryingLocalProbe()
    return probe.run()

if __name__ == '__main__':
    sys.exit(main())
